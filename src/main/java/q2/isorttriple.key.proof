\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sun Jun 03 18:49:21 BRT 2018
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]useUninterpretedMultiplication=true
[SMTSettings]SelectedTaclets=
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_FREE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[SMTSettings]integersMaximum=2147483645
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , wdChecks-wdChecks\\:off , reach-reach\\:on , moreSeqRules-moreSeqRules\\:on , sequences-sequences\\:on , Strings-Strings\\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\\:off , runtimeExceptions-runtimeExceptions\\:ban , wdOperator-wdOperator\\:L , JavaCard-JavaCard\\:on , integerSimplificationRules-integerSimplificationRules\\:full , permissions-permissions\\:off , modelFields-modelFields\\:treatAsAxiom , assertions-assertions\\:safe , intRules-intRules\\:arithmeticSemanticsIgnoringOF , bigint-bigint\\:on , programRules-programRules\\:Java
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]maxGenericSorts=2
[SMTSettings]integersMinimum=-2147483645
[SMTSettings]invariantForall=false
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\programVariables {
  int a, b, c, temp;
}

\functions {
  int a0;
  int b0;
  int c0;
}

\problem {
   a = a0 & b = b0 & c = c0 & leq(a, b)
-> \<{
     
             if (a>b) {}
             else  {
         int temp = 0;
                     if (a<=c) {
                             if (b<=c) {}
           else  {
             temp=c;
             c=b;
             b=temp;
           }
         }
         else  {
           temp=a;
           a=c;
           c=temp;
                             if (b<=c) {}
           else  {
             temp=c;
             c=b;
             b=temp;
           }
         }
       }
     }\> (  leq(a, b)
          & leq(b, c)
          & (  a = a0 & b = b0 & c = c0
             | a = a0
             & b = c0
             & c = b0
             | a = b0
             & b = a0
             & c = c0
             | a = b0
             & b = c0
             & c = a0
             | a = c0
             & b = a0
             & c = b0
             | a = c0
             & b = b0
             & c = a0))

}

\proof {
(keyLog "0" (keyUser "vitor" ) (keyVersion "19f0b8c2a4fe689cd76be6cd1753b36e2e825a89"))

(autoModeTime "163")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "5") (term "0,0,0,0,0,0,0,1,0"))
(rule "eqSymm" (formula "5") (term "0,0,1,0,0,0,1,0"))
(rule "eqSymm" (formula "5") (term "0,0,1,1,0"))
(rule "eqSymm" (formula "5") (term "1,0,1,1,0"))
(rule "eqSymm" (formula "5") (term "1,0,0,0,0,0,0,1,0"))
(rule "eqSymm" (formula "5") (term "1,0,0,0,0,0,1,0"))
(rule "eqSymm" (formula "5") (term "0,0,1,0,0,0,0,1,0"))
(rule "eqSymm" (formula "5") (term "1,0,1,0,0,0,0,1,0"))
(rule "eqSymm" (formula "5") (term "1,1,0,0,0,1,0"))
(rule "eqSymm" (formula "5") (term "0,0,1,0,0,1,0"))
(rule "eqSymm" (formula "5") (term "1,0,1,0,0,1,0"))
(rule "eqSymm" (formula "5") (term "0,0,1,0,1,0"))
(rule "eqSymm" (formula "3"))
(rule "eqSymm" (formula "2"))
(rule "eqSymm" (formula "1"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "1,0,0"))
(rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,0"))
(rule "inEqSimp_commuteLeq" (formula "4"))
(rule "ifElseUnfold" (formula "5") (inst "#boolv=x"))
(rule "variableDeclaration" (formula "5") (newnames "x"))
(rule "greater_than_comparison_simple" (formula "5"))
(rule "inEqSimp_gtToGeq" (formula "5") (term "0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
(rule "polySimp_addComm1" (formula "5") (term "0,0,0,0"))
(rule "inEqSimp_sepNegMonomial1" (formula "5") (term "0,0,0"))
(rule "polySimp_mulLiterals" (formula "5") (term "0,0,0,0"))
(rule "polySimp_elimOne" (formula "5") (term "0,0,0,0"))
(rule "inEqSimp_contradInEq1" (formula "5") (term "0,0,0") (ifseqformula "4"))
(rule "inEqSimp_homoInEq1" (formula "5") (term "0,0,0,0"))
(rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,0"))
(rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0,0"))
(rule "mul_literals" (formula "5") (term "0,1,0,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0,0"))
(rule "polySimp_addComm0" (formula "5") (term "0,0,0,0,0,0"))
(rule "polySimp_pullOutFactor1b" (formula "5") (term "0,0,0,0,0"))
(rule "add_literals" (formula "5") (term "1,1,0,0,0,0,0"))
(rule "times_zero_1" (formula "5") (term "1,0,0,0,0,0"))
(rule "add_zero_right" (formula "5") (term "0,0,0,0,0"))
(rule "leq_literals" (formula "5") (term "0,0,0,0"))
(builtin "One Step Simplification" (formula "5"))
(rule "ifElseSplit" (formula "5"))
(branch "if x true"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "closeFalse" (formula "1"))
)
(branch "if x false"
   (builtin "One Step Simplification" (formula "6"))
   (builtin "One Step Simplification" (formula "1"))
   (rule "true_left" (formula "1"))
   (rule "variableDeclarationAssign" (formula "5"))
   (rule "variableDeclaration" (formula "5") (newnames "temp_1"))
   (rule "assignment" (formula "5"))
   (rule "ifElseUnfold" (formula "5") (term "1") (inst "#boolv=x"))
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "x_1"))
   (rule "less_equal_than_comparison_simple" (formula "5") (term "1"))
   (builtin "One Step Simplification" (formula "5"))
   (rule "inEqSimp_commuteLeq" (formula "5") (term "0,0,1,0"))
   (rule "ifElseSplit" (formula "5"))
   (branch "if x_1 true"
      (builtin "One Step Simplification" (formula "6"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_3"))
      (rule "less_equal_than_comparison_simple" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_commuteLeq" (formula "6") (term "0,0,1,0"))
      (rule "ifElseSplit" (formula "6"))
      (branch "if x_3 true"
         (builtin "One Step Simplification" (formula "7"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "blockEmpty" (formula "7"))
         (rule "emptyModality" (formula "7"))
         (rule "replace_known_left" (formula "7") (term "1,0,1,1") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")) (ifInst ""  (formula "1")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "5")))
         (rule "closeTrue" (formula "7"))
      )
      (branch "if x_3 false"
         (builtin "One Step Simplification" (formula "7"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_geqRight" (formula "6"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_sepPosMonomial0" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_exactShadow3" (formula "2") (ifseqformula "1"))
         (rule "polySimp_mulComm0" (formula "2") (term "0,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "polySimp_addComm0" (formula "2") (term "0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1"))
         (rule "polySimp_rightDist" (formula "2") (term "1"))
         (rule "mul_literals" (formula "2") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "2") (term "1,1"))
         (rule "polySimp_elimOne" (formula "2") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "7") (ifseqformula "2"))
         (rule "inEqSimp_homoInEq0" (formula "7") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "7") (term "0,0"))
         (rule "add_literals" (formula "7") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "7") (term "1,0,0"))
         (rule "add_zero_right" (formula "7") (term "0,0"))
         (rule "qeq_literals" (formula "7") (term "0"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "emptyModality" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "4")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")))
         (rule "eqSymm" (formula "7") (term "1,0,1,1"))
         (rule "eqSymm" (formula "7") (term "0,0,0,0,0,0,1"))
         (rule "eqSymm" (formula "7") (term "1,0,0,0,0,1"))
         (rule "eqSymm" (formula "7") (term "1,1,0,1"))
         (rule "replace_known_left" (formula "7") (term "1,0,0,0,0,1") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "5")))
         (rule "inEqSimp_geqRight" (formula "7"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "polySimp_addComm1" (formula "1") (term "0"))
         (rule "inEqSimp_sepNegMonomial0" (formula "1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "0"))
         (rule "polySimp_elimOne" (formula "1") (term "0"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
   (branch "if x_1 false"
      (builtin "One Step Simplification" (formula "6"))
      (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "inEqSimp_geqRight" (formula "5"))
      (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
      (rule "assignment" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "assignment" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "assignment" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "polySimp_mulComm0" (formula "1") (term "1"))
      (rule "polySimp_rightDist" (formula "1") (term "1"))
      (rule "mul_literals" (formula "1") (term "0,1"))
      (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
      (rule "polySimp_elimOne" (formula "1") (term "1,1"))
      (rule "ifElseUnfold" (formula "6") (term "1") (inst "#boolv=x"))
      (rule "variableDeclaration" (formula "6") (term "1") (newnames "x_2"))
      (rule "less_equal_than_comparison_simple" (formula "6") (term "1"))
      (builtin "One Step Simplification" (formula "6"))
      (rule "ifElseSplit" (formula "6"))
      (branch "if x_2 true"
         (builtin "One Step Simplification" (formula "7"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "blockEmpty" (formula "7") (term "1"))
         (rule "inEqSimp_antiSymm" (formula "6") (ifseqformula "1"))
         (rule "applyEq" (formula "7") (term "0") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq1" (formula "7"))
         (rule "polySimp_pullOutFactor1" (formula "7") (term "0"))
         (rule "add_literals" (formula "7") (term "1,0"))
         (rule "times_zero_1" (formula "7") (term "0"))
         (rule "leq_literals" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "applyEq" (formula "1") (term "0") (ifseqformula "6"))
         (rule "inEqSimp_homoInEq0" (formula "1"))
         (rule "polySimp_pullOutFactor1" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,0"))
         (rule "times_zero_1" (formula "1") (term "0"))
         (rule "qeq_literals" (formula "1"))
         (rule "true_left" (formula "1"))
         (rule "applyEq" (formula "3") (term "1") (ifseqformula "5"))
         (rule "emptyModality" (formula "6") (term "1"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "4")) (ifInst ""  (formula "4")))
         (rule "eqSymm" (formula "6") (term "0,0,1,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "0,0,1,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,1,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,1,1"))
         (rule "eqSymm" (formula "6") (term "0,0,0,0,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "0,0,1,0,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,1,0,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,1,0,1"))
         (rule "replace_known_left" (formula "6") (term "1,1,0,1") (ifseqformula "3"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
         (rule "inEqSimp_commuteGeq" (formula "6") (term "1,0"))
         (rule "inEqSimp_commuteGeq" (formula "6") (term "0,0"))
         (rule "applyEq" (formula "6") (term "1,0,0") (ifseqformula "5"))
         (rule "applyEq" (formula "6") (term "0,1,0,1,0,0,0,1") (ifseqformula "5"))
         (rule "eqSymm" (formula "6") (term "1,0,1,0,0,0,1"))
         (rule "replace_known_left" (formula "6") (term "1,0,1,0,0,0,1") (ifseqformula "2"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "applyEq" (formula "6") (term "0,1,1") (ifseqformula "3"))
         (rule "eqSymm" (formula "6") (term "1,1"))
         (rule "replace_known_left" (formula "6") (term "1,1") (ifseqformula "5"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "applyEq" (formula "6") (term "0,1") (ifseqformula "5"))
         (rule "inEqSimp_homoInEq0" (formula "6") (term "1"))
         (rule "polySimp_pullOutFactor1" (formula "6") (term "0,1"))
         (rule "add_literals" (formula "6") (term "1,0,1"))
         (rule "times_zero_1" (formula "6") (term "0,1"))
         (rule "qeq_literals" (formula "6") (term "1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_leqRight" (formula "6"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "1"))
         (rule "andLeft" (formula "2"))
         (rule "inEqSimp_homoInEq1" (formula "2"))
         (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
         (rule "polySimp_rightDist" (formula "2") (term "1,0"))
         (rule "mul_literals" (formula "2") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "2") (term "0"))
         (rule "polySimp_addComm1" (formula "2") (term "0,0"))
         (rule "add_literals" (formula "2") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "2") (term "0"))
         (rule "add_literals" (formula "2") (term "1,1,0"))
         (rule "times_zero_1" (formula "2") (term "1,0"))
         (rule "add_zero_right" (formula "2") (term "0"))
         (rule "leq_literals" (formula "2"))
         (rule "closeFalse" (formula "2"))
      )
      (branch "if x_2 false"
         (builtin "One Step Simplification" (formula "7"))
         (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "inEqSimp_leqRight" (formula "6"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "assignment" (formula "7") (term "1"))
         (builtin "One Step Simplification" (formula "7"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_subsumption1" (formula "6") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "6") (term "0"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0"))
         (rule "add_literals" (formula "6") (term "1,1,0,0"))
         (rule "times_zero_1" (formula "6") (term "1,0,0"))
         (rule "add_zero_right" (formula "6") (term "0,0"))
         (rule "qeq_literals" (formula "6") (term "0"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "true_left" (formula "6"))
         (rule "emptyModality" (formula "6") (term "1"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")) (ifInst ""  (formula "5")))
         (rule "eqSymm" (formula "6") (term "0,0,1,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,0,1,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "0,0,0,0,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "0,0,1,0,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "0,1,0,1"))
         (rule "eqSymm" (formula "6") (term "1,1,0,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "0,0,1,0,0,0,1"))
         (rule "eqSymm" (formula "6") (term "1,1,0,1"))
         (rule "replace_known_left" (formula "6") (term "1,1,0,1") (ifseqformula "4"))
         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "4")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
         (rule "inEqSimp_commuteGeq" (formula "6") (term "0"))
         (rule "inEqSimp_subsumption1" (formula "6") (term "1") (ifseqformula "1"))
         (rule "inEqSimp_homoInEq0" (formula "6") (term "0,1"))
         (rule "polySimp_pullOutFactor1b" (formula "6") (term "0,0,1"))
         (rule "add_literals" (formula "6") (term "1,1,0,0,1"))
         (rule "times_zero_1" (formula "6") (term "1,0,0,1"))
         (rule "add_zero_right" (formula "6") (term "0,0,1"))
         (rule "qeq_literals" (formula "6") (term "0,1"))
         (builtin "One Step Simplification" (formula "6"))
         (rule "inEqSimp_leqRight" (formula "6"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
         (rule "inEqSimp_sepPosMonomial1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1"))
         (rule "polySimp_rightDist" (formula "1") (term "1"))
         (rule "mul_literals" (formula "1") (term "0,1"))
         (rule "polySimp_mulLiterals" (formula "1") (term "1,1"))
         (rule "polySimp_elimOne" (formula "1") (term "1,1"))
         (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "3"))
         (rule "andLeft" (formula "1"))
         (rule "inEqSimp_homoInEq1" (formula "1"))
         (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
         (rule "polySimp_rightDist" (formula "1") (term "1,0"))
         (rule "mul_literals" (formula "1") (term "0,1,0"))
         (rule "polySimp_addAssoc" (formula "1") (term "0"))
         (rule "polySimp_addComm1" (formula "1") (term "0,0"))
         (rule "add_literals" (formula "1") (term "0,0,0"))
         (rule "polySimp_pullOutFactor1b" (formula "1") (term "0"))
         (rule "add_literals" (formula "1") (term "1,1,0"))
         (rule "times_zero_1" (formula "1") (term "1,0"))
         (rule "add_zero_right" (formula "1") (term "0"))
         (rule "leq_literals" (formula "1"))
         (rule "closeFalse" (formula "1"))
      )
   )
)
)

}
