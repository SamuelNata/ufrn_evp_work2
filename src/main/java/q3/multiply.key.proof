\settings {
"#Proof-Settings-Config-File
#Mon Jun 04 11:21:59 BRT 2018
[General]SoundNotification=true
[View]FontIndex=2
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[General]UseOCL=false
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[DecisionProcedure]Timeout=60
[View]ShowWholeTaclet=false
[General]ProofAssistant=true
[View]MaxTooltipLines=40
[General]DnDDirectionSensitive=true
[SimultaneousUpdateSimplifier]EagerSimplification=true
[General]StupidMode=true
[Strategy]Timeout=-1
[Strategy]MaximumNumberOfAutomaticApplications=10000
[Libraries]Default=/home/vitorgodeiro/.key/libraries/acc.key-false, /home/vitorgodeiro/.key/libraries/deprecatedRules.key-false, /home/vitorgodeiro/.key/libraries/stringRules.key-false
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[Choice]DefaultChoices=initialisation-initialisation\:disableStaticInitialisation , wdChecks-wdChecks\:off , reach-reach\:on , moreSeqRules-moreSeqRules\:off , javacard-javacard\:jcOff , sequences-sequences\:on , transactions-transactions\:transactionsOn , Strings-Strings\:on , joinGenerateIsWeakeningGoal-joinGenerateIsWeakeningGoal\:off , runtimeExceptions-runtimeExceptions\:ban , wdOperator-wdOperator\:L , JavaCard-JavaCard\:on , integerSimplificationRules-integerSimplificationRules\:full , permissions-permissions\:off , modelFields-modelFields\:treatAsAxiom , nullPointerPolicy-nullPointerPolicy\:nullCheck , throughout-throughout\:toutOn , transactionAbort-transactionAbort\:abortOn , assertions-assertions\:safe , intRules-intRules\:arithmeticSemanticsIgnoringOF , bigint-bigint\:on , programRules-programRules\:Java
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[DecisionProcedure]ActiveRule=_noname_
[General]UseJML=true
[View]HideClosedSubtrees=false
[Choice]Choices=
[View]HideIntermediateProofsteps=false
[Strategy]ActiveStrategy=HoareStrategy
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
"
}

\programVariables {
  int n, m, res;
}

\functions {
  int n0;
  int m0;
}

\problem {
(
n = n0 & m = m0

) ->
(
\<{
    res=0;
    if (n<0) {
      n=-n;
      m=-m;
    }
    else {}
    while ( n>0 ) {
      res=res+m;
      n=n-1;
    }
  }\> (res = n0 * m0 & n = 0)

)
}

\proof {
(keyLog "0" (keyUser "vitorgodeiro" ) (keyVersion "a9aca35c014abb52060cff630741519ad9088fea"))

(autoModeTime "802")

(branch "dummy ID"
(rule "andLeft" (formula "1"))
(rule "eqSymm" (formula "3") (term "0,0"))
(rule "eqSymm" (formula "2"))
(rule "eqSymm" (formula "1"))
(rule "assignment" (formula "3") (userinteraction))
(rule "conditional" (formula "3") (userinteraction))
(branch " 
n<0=TRUE (then-branch)"
   (rule "assignment" (formula "4") (userinteraction))
   (rule "assignment" (formula "4") (userinteraction))
   (rule "removeBlock2" (formula "4") (userinteraction))
   (builtin "Loop Invariant" (formula "4") (inst "res = -m * (n0 + n) & m = -m0 & !n <  0")(inst "n") (inst "oldDecreaseValue"))
   (branch " Invariant Initially Valid"
      (builtin "Update Simplification" (formula "1"))
      (builtin "Update Simplification" (formula "4"))
      (rule "castDelInt" (formula "4") (term "0,0,0,0"))
      (rule "castDelInt" (formula "4") (term "0,0,1,0,0,0"))
      (rule "castDelInt" (formula "4") (term "1,1,1,0,0,0"))
      (rule "castDelInt" (formula "4") (term "0,1,0,0"))
      (rule "castDelInt" (formula "4") (term "0,0,1,0"))
      (rule "castDelInt" (formula "4") (term "0,1"))
      (rule "translateJavaUnaryMinusLong" (formula "4") (term "0,0,1,0,0,0"))
      (rule "translateJavaUnaryMinusLong" (formula "4") (term "1,1,1,0,0,0"))
      (rule "translateJavaUnaryMinusLong" (formula "4") (term "0,1,0,0"))
      (rule "translateJavaUnaryMinusLong" (formula "4") (term "0,0,1,0"))
      (rule "translateJavaUnaryMinusLong" (formula "4") (term "0,1"))
      (rule "eqSymm" (formula "4") (term "1,0,0"))
      (rule "polySimp_elimNeg" (formula "4") (term "0,1,0,0,0"))
      (rule "polySimp_elimNeg" (formula "4") (term "1,1,1,0,0,0"))
      (rule "polySimp_elimNeg" (formula "4") (term "0,0,1,0"))
      (rule "polySimp_elimNeg" (formula "4") (term "0,1"))
      (rule "polySimp_elimNeg" (formula "4") (term "1,1,0,0"))
      (rule "polySimp_elimNeg" (formula "4") (term "0,1,0,0"))
      (rule "polySimp_elimNeg" (formula "4") (term "0,0,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0,1,0,0,0"))
      (rule "polySimp_homoEq" (formula "4") (term "1,0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0,1,0,0"))
      (rule "polySimp_elimOneLeft1" (formula "4") (term "1,0,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "1"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1,0"))
      (rule "times_zero_1" (formula "4") (term "1,0,0,0,1,0"))
      (rule "add_zero_right" (formula "4") (term "0,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "4") (term "1,1,0,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
      (rule "polySimp_mulAssoc" (formula "4") (term "0,1,0,0,0"))
      (rule "polySimp_homoEq" (formula "4") (term "0,0,0"))
      (rule "times_zero_2" (formula "4") (term "1,0,0,0,0"))
      (rule "add_zero_right" (formula "4") (term "0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "0,0,0,0,0,0"))
      (rule "applyEq" (formula "4") (term "0,1,0,0,0,0") (ifseqformula "2"))
      (rule "polySimp_pullOutFactor2" (formula "4") (term "0,0,0,0"))
      (rule "add_literals" (formula "4") (term "1,0,0,0,0"))
      (rule "times_zero_1" (formula "4") (term "0,0,0,0"))
      (rule "eqClose" (formula "4") (term "0,0,0"))
      (rule "concrete_and_1" (formula "4") (term "0,0"))
      (rule "applyEq" (formula "4") (term "1,0,0,0") (ifseqformula "3"))
      (rule "polySimp_pullOutFactor2" (formula "4") (term "0,0,0"))
      (rule "add_literals" (formula "4") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "4") (term "0,0,0"))
      (rule "eqClose" (formula "4") (term "0,0"))
      (rule "concrete_and_1" (formula "4") (term "0"))
      (rule "inEqSimp_invertInEq1" (formula "4") (term "1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0,1"))
      (rule "times_zero_2" (formula "4") (term "1,1"))
      (rule "polySimp_elimOne" (formula "4") (term "0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "4") (term "0,0"))
      (rule "polySimp_mulLiterals" (formula "4") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "4") (term "0,0,0"))
      (rule "inEqSimp_contradInEq0" (formula "4") (term "0,0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "4") (term "0,0,0"))
      (rule "concrete_and_2" (formula "4") (term "0,0"))
      (rule "concrete_not_2" (formula "4") (term "0"))
      (rule "concrete_and_1" (formula "4"))
      (rule "inEqSimp_leqRight" (formula "4"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_contradInEq0" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (rule "concrete_and_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch " Preserves Invariant"
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "notLeft" (formula "4"))
      (rule "eqSymm" (formula "6") (term "1,0,0,0"))
      (rule "eqSymm" (formula "3"))
      (rule "polySimp_elimNeg" (formula "6") (term "0,1,0,0,0,0"))
      (rule "polySimp_elimNeg" (formula "2") (term "0,1"))
      (rule "polySimp_elimNeg" (formula "6") (term "0,1,0,0,0"))
      (rule "polySimp_elimNeg" (formula "3") (term "0"))
      (rule "polySimp_homoEq" (formula "6") (term "1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "1,0,1,0,0,0"))
      (rule "polySimp_homoEq" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "1,0,1,0,0,0"))
      (rule "polySimp_elimOne" (formula "3") (term "1,0"))
      (rule "inEqSimp_ltRight" (formula "5"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0"))
      (rule "inEqSimp_gtToGeq" (formula "5"))
      (rule "times_zero_1" (formula "5") (term "1,0,0"))
      (rule "add_zero_right" (formula "5") (term "0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0"))
      (rule "polySimp_addComm0" (formula "6") (term "1,1,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "1,1"))
      (rule "polySimp_addComm1" (formula "6") (term "0,0,1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
      (rule "polySimp_mulComm1" (formula "6") (term "0,1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0,0,0,0"))
      (rule "polySimp_mulAssoc" (formula "6") (term "1,1,0,0,0,0"))
      (rule "polySimp_homoEq" (formula "6") (term "0,0,0,0"))
      (rule "polySimp_addComm1" (formula "6") (term "0,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "6") (term "0,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulComm1" (formula "3") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,0,1"))
      (rule "polySimp_mulAssoc" (formula "3") (term "1,1"))
      (rule "polySimp_homoEq" (formula "3"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "polySimp_addComm0" (formula "3") (term "0,0"))
      (rule "polySimp_sepPosMonomial" (formula "6") (term "1,0,0,0"))
      (rule "polySimp_sepPosMonomial" (formula "4"))
      (rule "polySimp_sepNegMonomial" (formula "6") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,0,0,0,0"))
      (rule "polySimp_sepNegMonomial" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5"))
      (rule "mul_literals" (formula "5") (term "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,0,1,0"))
      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
      (rule "leq_literals" (formula "1") (term "0"))
      (rule "concrete_or_1" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,1,0,0"))
      (rule "add_zero_left" (formula "5") (term "0,1,0,0"))
      (rule "assignment" (formula "5") (userinteraction))
      (rule "assignment" (formula "5") (userinteraction))
      (rule "exit" (formula "5") (userinteraction))
      (builtin "Update Simplification" (formula "5"))
      (rule "castDelInt" (formula "5") (term "0,0,1,0,0,0"))
      (rule "castDelInt" (formula "5") (term "0,0,1,1,0,0,0"))
      (rule "castDelInt" (formula "5") (term "0,1,0"))
      (rule "castDelInt" (formula "5") (term "1,1,0,1"))
      (rule "castDelInt" (formula "5") (term "0,1,1"))
      (rule "translateJavaAddInt" (formula "5") (term "0,0,1,0,0,0"))
      (rule "translateJavaSubInt" (formula "5") (term "0,0,1,1,0,0,0"))
      (rule "translateJavaSubInt" (formula "5") (term "0,1,0"))
      (rule "translateJavaSubInt" (formula "5") (term "1,1,0,1"))
      (rule "translateJavaSubInt" (formula "5") (term "0,1,1"))
      (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
      (rule "concrete_and_3" (formula "5") (term "0,0"))
      (rule "polySimp_elimSub" (formula "5") (term "0,1,0"))
      (rule "mul_literals" (formula "5") (term "1,0,1,0"))
      (rule "polySimp_elimSub" (formula "5") (term "1,1,0,1"))
      (rule "mul_literals" (formula "5") (term "1,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "5") (term "0,1,1"))
      (rule "mul_literals" (formula "5") (term "1,0,1,1"))
      (rule "polySimp_elimSub" (formula "5") (term "0,0,1,1,0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0,1,1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "0,1,1,0,0"))
      (rule "polySimp_mulComm1" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_addComm0" (formula "5") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "5") (term "1,1,0,1"))
      (rule "polySimp_addComm0" (formula "5") (term "0,1,1"))
      (rule "polySimp_addComm0" (formula "5") (term "1,0,1,0,0"))
      (rule "polySimp_addComm0" (formula "5") (term "1,1,1,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "0,1,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "0,0,1,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,1,0,0"))
      (rule "polySimp_mulLiterals" (formula "5") (term "0,1,1,0,0"))
      (rule "polySimp_elimOne" (formula "5") (term "0,1,1,0,0"))
      (rule "polySimp_mulAssoc" (formula "5") (term "1,1,1,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "1,0,1"))
      (rule "add_literals" (formula "5") (term "0,1,0,1"))
      (rule "add_zero_left" (formula "5") (term "1,0,1"))
      (rule "polySimp_addAssoc" (formula "5") (term "1,0,0"))
      (rule "polySimp_addComm1" (formula "5") (term "0,1,0,0"))
      (rule "polySimp_pullOutFactor2" (formula "5") (term "0,0,1,0,0"))
      (rule "add_literals" (formula "5") (term "1,0,0,1,0,0"))
      (rule "times_zero_1" (formula "5") (term "0,0,1,0,0"))
      (rule "add_zero_left" (formula "5") (term "0,1,0,0"))
      (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "2"))
      (rule "concrete_and_1" (formula "5") (term "0"))
      (rule "applyEq" (formula "5") (term "0,0,1") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
      (rule "polySimp_pullOutFactor1" (formula "5") (term "0,0,1"))
      (rule "add_literals" (formula "5") (term "1,0,0,1"))
      (rule "times_zero_1" (formula "5") (term "0,0,1"))
      (rule "leq_literals" (formula "5") (term "0,1"))
      (rule "concrete_and_1" (formula "5") (term "1"))
      (rule "eq_and" (formula "5"))
      (rule "inEqSimp_geqRight" (formula "5"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "5"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (rule "concrete_and_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch " Use Invariant"
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "3"))
      (rule "eqSymm" (formula "2"))
      (rule "polySimp_elimNeg" (formula "1") (term "0,1"))
      (rule "polySimp_elimNeg" (formula "2") (term "0"))
      (rule "polySimp_homoEq" (formula "2"))
      (rule "polySimp_mulLiterals" (formula "2") (term "1,0"))
      (rule "polySimp_elimOne" (formula "2") (term "1,0"))
      (rule "inEqSimp_gtRight" (formula "4"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_ltRight" (formula "4"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "3") (term "1,1"))
      (rule "polySimp_rightDist" (formula "3") (term "1"))
      (rule "polySimp_mulComm1" (formula "3") (term "0,1"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,0,1"))
      (rule "polySimp_mulAssoc" (formula "3") (term "1,1"))
      (rule "polySimp_homoEq" (formula "3"))
      (rule "polySimp_addComm1" (formula "3") (term "0"))
      (rule "polySimp_addComm0" (formula "3") (term "0,0"))
      (rule "polySimp_sepPosMonomial" (formula "4"))
      (rule "polySimp_sepNegMonomial" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
      (rule "leq_literals" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "applyEq" (formula "2") (term "0,0,1,1") (ifseqformula "1"))
      (rule "times_zero_2" (formula "2") (term "0,1,1"))
      (rule "times_zero_2" (formula "2") (term "1,1"))
      (rule "add_zero_right" (formula "2") (term "1"))
      (rule "exit" (formula "4") (userinteraction))
      (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
      (rule "concrete_and_3" (formula "4"))
      (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "3"))
      (rule "polySimp_mulAssoc" (formula "4") (term "0"))
      (rule "polySimp_homoEq" (formula "4"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,0"))
      (rule "polySimp_elimOne" (formula "4") (term "1,0"))
      (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "2"))
      (rule "polySimp_pullOutFactor1" (formula "4") (term "0"))
      (rule "add_literals" (formula "4") (term "1,0"))
      (rule "times_zero_1" (formula "4") (term "0"))
      (rule "eqClose" (formula "4"))
      (rule "closeTrue" (formula "4"))
   )
)
(branch " 
n<0=FALSE (else branch)"
   (builtin "Update Simplification" (formula "1"))
   (rule "notLeft" (formula "1"))
   (rule "inEqSimp_ltRight" (formula "3"))
   (rule "times_zero_1" (formula "1") (term "0,0"))
   (rule "add_zero_left" (formula "1") (term "0"))
   (rule "removeBlock2" (formula "4"))
   (builtin "Loop Invariant" (formula "4") (inst "res = m * (n0 - n) & m = m0 & !n <  0")(inst "n") (inst "oldDecreaseValue0"))
   (branch " Invariant Initially Valid"
      (builtin "Update Simplification" (formula "4"))
      (rule "castDelInt" (formula "4") (term "0,0,0,0"))
      (rule "eqSymm" (formula "4") (term "1,0,0"))
      (rule "eqSymm" (formula "4") (term "0,0,0"))
      (rule "replace_known_left" (formula "4") (term "1,0,0") (ifseqformula "3"))
      (rule "concrete_and_3" (formula "4") (term "0,0"))
      (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
      (rule "concrete_and_3" (formula "4"))
      (rule "polySimp_elimSub" (formula "4") (term "1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "0,1"))
      (rule "times_zero_1" (formula "4") (term "1,0,0,0,1"))
      (rule "add_zero_right" (formula "4") (term "0,0,0,1"))
      (rule "polySimp_addComm0" (formula "4") (term "1,0,0"))
      (rule "polySimp_rightDist" (formula "4") (term "0,0"))
      (rule "polySimp_mulAssoc" (formula "4") (term "0,0,0"))
      (rule "polySimp_mulComm0" (formula "4") (term "0,0,0,0"))
      (rule "applyEq" (formula "4") (term "0,1,0,0") (ifseqformula "2"))
      (rule "polySimp_pullOutFactor2" (formula "4") (term "0,0"))
      (rule "add_literals" (formula "4") (term "1,0,0"))
      (rule "times_zero_1" (formula "4") (term "0,0"))
      (rule "eqClose" (formula "4") (term "0"))
      (rule "concrete_and_1" (formula "4"))
      (rule "notRight" (formula "4"))
      (rule "inEqSimp_sepPosMonomial0" (formula "1"))
      (rule "mul_literals" (formula "1") (term "1"))
      (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "2"))
      (rule "qeq_literals" (formula "1") (term "0"))
      (rule "concrete_and_2" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch " Preserves Invariant"
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "notLeft" (formula "4"))
      (rule "eqSymm" (formula "6") (term "0,0,0,0"))
      (rule "eqSymm" (formula "6") (term "1,0,0,0"))
      (rule "eqSymm" (formula "2"))
      (rule "eqSymm" (formula "3"))
      (rule "polySimp_elimSub" (formula "6") (term "1,0,0,0,0,0"))
      (rule "polySimp_elimSub" (formula "2") (term "1,0"))
      (rule "inEqSimp_ltRight" (formula "5"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0,0"))
      (rule "times_zero_1" (formula "6") (term "1,0,0,0,1,0,0"))
      (rule "add_zero_right" (formula "6") (term "0,0,0,1,0,0"))
      (rule "inEqSimp_ltToLeq" (formula "6") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,1,0"))
      (rule "inEqSimp_gtToGeq" (formula "5"))
      (rule "times_zero_1" (formula "5") (term "1,0,0"))
      (rule "add_zero_right" (formula "5") (term "0,0"))
      (rule "polySimp_addComm0" (formula "6") (term "1,0,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "3") (term "1,0"))
      (rule "polySimp_addComm1" (formula "6") (term "0,0,1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "0,0,0,0,0"))
      (rule "polySimp_homoEq" (formula "6") (term "0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulAssoc" (formula "6") (term "0,1,1,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "0"))
      (rule "polySimp_homoEq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "3") (term "0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0,0"))
      (rule "polySimp_mulAssoc" (formula "6") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "6") (term "0,0,1,0,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,1,0,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "6") (term "0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,0,0,0,0"))
      (rule "polySimp_sepNegMonomial" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,1,0,0"))
      (rule "mul_literals" (formula "6") (term "1,0,1,0,0"))
      (rule "inEqSimp_sepPosMonomial1" (formula "5"))
      (rule "mul_literals" (formula "5") (term "1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "6") (term "0,1,0"))
      (rule "polySimp_mulLiterals" (formula "6") (term "0,0,1,0"))
      (rule "polySimp_elimOne" (formula "6") (term "0,0,1,0"))
      (rule "inEqSimp_subsumption1" (formula "1") (ifseqformula "5"))
      (rule "leq_literals" (formula "1") (term "0"))
      (rule "concrete_or_1" (formula "1"))
      (rule "true_left" (formula "1"))
      (rule "inEqSimp_notLeq" (formula "5") (term "1,0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,0,1,0,0"))
      (rule "add_literals" (formula "5") (term "0,0,1,0,0"))
      (rule "add_zero_left" (formula "5") (term "0,1,0,0"))
      (rule "assignment" (formula "5") (userinteraction))
      (rule "assignment" (formula "5") (userinteraction))
      (rule "exit" (formula "5") (userinteraction))
      (builtin "Update Simplification" (formula "5"))
      (rule "castDelInt" (formula "5") (term "0,1,0,0,0"))
      (rule "castDelInt" (formula "5") (term "0,1,1,0,0,0"))
      (rule "castDelInt" (formula "5") (term "0,1,0"))
      (rule "castDelInt" (formula "5") (term "1,1,0,1"))
      (rule "castDelInt" (formula "5") (term "0,1,1"))
      (rule "translateJavaAddInt" (formula "5") (term "0,1,0,0,0"))
      (rule "translateJavaSubInt" (formula "5") (term "0,1,1,0,0,0"))
      (rule "translateJavaSubInt" (formula "5") (term "0,1,0"))
      (rule "translateJavaSubInt" (formula "5") (term "1,1,0,1"))
      (rule "translateJavaSubInt" (formula "5") (term "0,1,1"))
      (rule "replace_known_left" (formula "5") (term "1,0,0") (ifseqformula "3"))
      (rule "concrete_and_3" (formula "5") (term "0,0"))
      (rule "polySimp_elimSub" (formula "5") (term "0,1,0"))
      (rule "mul_literals" (formula "5") (term "1,0,1,0"))
      (rule "polySimp_elimSub" (formula "5") (term "1,1,0,1"))
      (rule "mul_literals" (formula "5") (term "1,1,1,0,1"))
      (rule "polySimp_elimSub" (formula "5") (term "0,1,1"))
      (rule "mul_literals" (formula "5") (term "1,0,1,1"))
      (rule "polySimp_homoEq" (formula "5") (term "0,0"))
      (rule "polySimp_elimSub" (formula "5") (term "0,1,0,0,0,0"))
      (rule "mul_literals" (formula "5") (term "1,0,1,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "5") (term "0,1,0"))
      (rule "polySimp_addComm0" (formula "5") (term "1,1,0,1"))
      (rule "polySimp_addComm0" (formula "5") (term "0,1,1"))
      (rule "polySimp_addComm0" (formula "5") (term "0,0,0,0,0"))
      (rule "polySimp_addComm0" (formula "5") (term "1,1,0,0,0,0"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,0,0"))
      (rule "polySimp_addAssoc" (formula "5") (term "1,0,1"))
      (rule "add_literals" (formula "5") (term "0,1,0,1"))
      (rule "add_zero_left" (formula "5") (term "1,0,1"))
      (rule "polySimp_addAssoc" (formula "5") (term "0,0,0,0"))
      (rule "polySimp_addComm1" (formula "5") (term "0,0,0,0,0"))
      (rule "polySimp_pullOutFactor1" (formula "5") (term "0,0,0,0,0,0"))
      (rule "add_literals" (formula "5") (term "1,0,0,0,0,0,0"))
      (rule "times_zero_1" (formula "5") (term "0,0,0,0,0,0"))
      (rule "add_zero_left" (formula "5") (term "0,0,0,0,0"))
      (rule "applyEq" (formula "5") (term "0,1,0,0,0") (ifseqformula "2"))
      (rule "polySimp_pullOutFactor1" (formula "5") (term "0,0,0"))
      (rule "add_literals" (formula "5") (term "1,0,0,0"))
      (rule "times_zero_1" (formula "5") (term "0,0,0"))
      (rule "eqClose" (formula "5") (term "0,0"))
      (rule "concrete_and_1" (formula "5") (term "0"))
      (rule "applyEq" (formula "5") (term "0,0,1") (ifseqformula "1"))
      (rule "inEqSimp_homoInEq1" (formula "5") (term "0,1"))
      (rule "polySimp_pullOutFactor1" (formula "5") (term "0,0,1"))
      (rule "add_literals" (formula "5") (term "1,0,0,1"))
      (rule "times_zero_1" (formula "5") (term "0,0,1"))
      (rule "leq_literals" (formula "5") (term "0,1"))
      (rule "concrete_and_1" (formula "5") (term "1"))
      (rule "eq_and" (formula "5"))
      (rule "inEqSimp_geqRight" (formula "5"))
      (rule "times_zero_1" (formula "1") (term "1,0,0"))
      (rule "add_zero_right" (formula "1") (term "0,0"))
      (rule "polySimp_addAssoc" (formula "1") (term "0"))
      (rule "add_literals" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_contradInEq0" (formula "5") (ifseqformula "1"))
      (rule "qeq_literals" (formula "5") (term "0"))
      (rule "concrete_and_2" (formula "5"))
      (rule "closeFalse" (formula "5"))
   )
   (branch " Use Invariant"
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "3"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "3"))
      (rule "eqSymm" (formula "2"))
      (rule "eqSymm" (formula "1"))
      (rule "polySimp_elimSub" (formula "1") (term "1,0"))
      (rule "inEqSimp_gtRight" (formula "4"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "inEqSimp_ltRight" (formula "4"))
      (rule "times_zero_1" (formula "1") (term "0,0"))
      (rule "add_zero_left" (formula "1") (term "0"))
      (rule "polySimp_addComm0" (formula "3") (term "1,0"))
      (rule "polySimp_rightDist" (formula "3") (term "0"))
      (rule "polySimp_homoEq" (formula "3"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "3") (term "0,1,1,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,1,0"))
      (rule "polySimp_rightDist" (formula "3") (term "1,0"))
      (rule "polySimp_mulAssoc" (formula "3") (term "0,1,0"))
      (rule "polySimp_mulComm0" (formula "3") (term "0,0,1,0"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0,1,0"))
      (rule "polySimp_elimOne" (formula "3") (term "0,1,0"))
      (rule "polySimp_addAssoc" (formula "3") (term "0"))
      (rule "polySimp_sepNegMonomial" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "inEqSimp_antiSymm" (formula "1") (ifseqformula "2"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
      (rule "leq_literals" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
      (rule "qeq_literals" (formula "2"))
      (rule "true_left" (formula "2"))
      (rule "applyEq" (formula "2") (term "0,1,1") (ifseqformula "1"))
      (rule "times_zero_2" (formula "2") (term "1,1"))
      (rule "add_zero_right" (formula "2") (term "1"))
      (rule "exit" (formula "4") (userinteraction))
      (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
      (rule "concrete_and_3" (formula "4"))
      (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "3"))
      (rule "close" (formula "4") (ifseqformula "2"))
   )
)
)

}
